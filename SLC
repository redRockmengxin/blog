软件生命周期(Software Life Cycle,SLC)是软件的产生直到报废或停止使用的生命周期。
软件生命周期内有问题定义、可行性分析、总体描述、系统设计、编码、调试和测试、验收与运行、维护升级到废弃等阶段，也有将以上阶段的活动组合在内的迭代阶段，即迭代作为生命周期的阶段。
软件不是程序，是系统。
软件的特点：不可视，复杂性，可塑性，模糊性。
工程（用建筑来类比）客户需求-->面向用户、面向施工的设计（设计阶段）-->建造施工阶段
一.瀑布模型：阶段&过程、顺序&依赖、文档&评审（下面的每个阶段都需要产生文本文档（报告））
先说需求：1.需求分析是指对解决现实世界某个问题的软件产品的描述，及对软件产品约束的描述。
Q1.如何使不同人员（业务、设计、编程等）准确理解客户需求？-->转向需求工程
软件设计：2.软件设计分为总体设计（概要设计）和详细设计。
2.1.软件设计需要学习结构化分析与设计、面向对象的分析与设计、软件体系结构、软件设计模型。
软件编码：3.软件编码-->软件构造
3.1.需要学习面向对象的程序设计、软件设计模式、J2EE程序开发、.Net程序开发。
软件测试4.有单元测试和组装测试。-->软件测试技术
软件维护：5.包括改正性、适应性、完善性维护。-->软件维护与软件演化技术
二.演化模型：迭代、演化。
三.螺旋模型：原型、迭代、增量。

模型
模型是为某种目的而建立的关于系统及其环境的描述或规格说明
模型是知识的外在表现形式
软件工程基本思维模式是尽量用模型表达思想，促进思维，增进理解。
建模的目的：理解与沟通、建立理解上的一致性、分析/诊断/测试/评估、操作/控制、产生一致的文档、
决策/学习/培训、代码生成、理论研究。
MDA（模型驱动体系）：（需求是模糊的，程序是精确的，通过衔接，实现客户到代码的转换）
自然/社会问题-->建立计算无关模型（CIM），集中于业务理解，解决业务人员和软件人员的理解偏差（面向客户的需求层建模，业务人员完成）-->
建立平台无关模型（PIM），集中于软件设计，解决设计人员和编程人员的理解偏差（面向软件系统的软件设计层建模，较宏观，软件设计人员）-->
建立平台相关模型（PSM），集中于软件设计，程序代码编写问题交由工具完成（面向程序设计的软件实现层建模，考虑软件开发环境，代码开发人员）-->
用程序设计语言编写程序代码-->求解自然/社会问题的软件系统-->（强调模型之间的变换和代码的生成）
理解MDA要先理解元模型（mate model）是模型的模型，由MOF（Mate-Object Facility）而来。

如何建立模型和建立哪些模型？
单一模型属于模型与建模方法，多模型系统属于方法论与体系结构。
方法有结构化思维与方法（自顶向下的分层分解），面向对象思维与方法（识别对象和类，以对象为中心），形式化思维方法（数学的集合、图、逻辑）
软件工程生态环境包括软件工程环境（可以产生和维护后者）和软件环境。
软件开发功能在不断细化
开发人员在开发环境需要关注 自己本身的模块及其配置
测试环境需要各个模块之间的关系及正确性
应用环境关注过程和数据库及权限控制




